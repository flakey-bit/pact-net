//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace PactNet.Models.VerifierJson
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Schema for verification results in JSON format
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class VerificationExecutionResult
    {
        /// <summary>
        /// Boolean value for the overall result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Always)]
        public bool Result { get; set; }

        /// <summary>
        /// All notices returned from the Pact broker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Notices { get; set; }

        /// <summary>
        /// All captured output from the verification process
        /// </summary>
        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Output { get; set; }

        /// <summary>
        /// List of all verification errors
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Errors> Errors { get; set; }

        /// <summary>
        /// List of all pending verification errors
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pendingErrors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PendingErrors> PendingErrors { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Errors
    {
        /// <summary>
        /// interaction description that failed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interaction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Interaction { get; set; }

        /// <summary>
        /// Will either be an error when the verification could not be completed, or a mismatch
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mismatch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mismatch Mismatch { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class PendingErrors
    {
        /// <summary>
        /// interaction description that failed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interaction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Interaction { get; set; }

        /// <summary>
        /// Will either be an error when the verification could not be completed, or a mismatch
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mismatch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mismatch2 Mismatch { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Mismatch
    {
        /// <summary>
        /// The type of mismatch/error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MismatchType Type { get; set; }

        /// <summary>
        /// The mismatches that occurred. Will be present if type=mismatches
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mismatches", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Mismatches> Mismatches { get; set; }

        /// <summary>
        /// The error message (if type=error)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Interaction ID from the Pact broker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InteractionId { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Mismatch2
    {
        /// <summary>
        /// The type of mismatch/error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mismatch2Type Type { get; set; }

        /// <summary>
        /// The mismatches that occurred. Will be present if type=mismatches
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mismatches", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Mismatches> Mismatches { get; set; }

        /// <summary>
        /// The error message (if type=error)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Interaction ID from the Pact broker
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InteractionId { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MismatchType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mismatches")]
        Mismatches = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 1,


    }

    /// <summary>
    /// Mismatch that occurred from verification
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Mismatches
    {
        /// <summary>
        /// The type of mismatch that occurred
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MismatchesType Type { get; set; }

        /// <summary>
        /// The expected value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Expected { get; set; }

        /// <summary>
        /// The actual value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Actual { get; set; }

        /// <summary>
        /// Description of the mismatch
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mismatch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mismatch { get; set; }

        /// <summary>
        /// The query parameter that the mismatch is for (type=QueryMismatch)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }

        /// <summary>
        /// The header/metadata that the mismatch is for (type=HeaderMismatch or MetadataMismatch)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The expected body (type=BodyTypeMismatch)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedBody", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExpectedBody { get; set; }

        /// <summary>
        /// The actual body (type=BodyTypeMismatch)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actualBody", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ActualBody { get; set; }

        /// <summary>
        /// The JSON-Path like expression that the mismatch is for (type=BodyMismatch)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum Mismatch2Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mismatches")]
        Mismatches = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 1,


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum MismatchesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MethodMismatch")]
        MethodMismatch = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"PathMismatch")]
        PathMismatch = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"StatusMismatch")]
        StatusMismatch = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"QueryMismatch")]
        QueryMismatch = 3,


        [System.Runtime.Serialization.EnumMember(Value = @"HeaderMismatch")]
        HeaderMismatch = 4,


        [System.Runtime.Serialization.EnumMember(Value = @"BodyTypeMismatch")]
        BodyTypeMismatch = 5,


        [System.Runtime.Serialization.EnumMember(Value = @"BodyMismatch")]
        BodyMismatch = 6,


        [System.Runtime.Serialization.EnumMember(Value = @"MetadataMismatch")]
        MetadataMismatch = 7,


    }
}